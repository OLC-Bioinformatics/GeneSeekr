#!/usr/bin/env python
from GeneSeekr.GeneSeekrOOP import ARMISeekr
__author__ = 'mike knowles'


def helper(genes, targets, out, cuttoff, aro, threads):
    from glob import glob
    from GeneSeekr.ARMICARD import decipher
    import os
    import json
    import time
    assert os.path.isdir(out), u'Output location is not a valid directory {0!r:s}'.format(out)
    assert os.path.isfile(genes), u'ARMI-genes.fa not valid {0!r:s}'.format(genes)
    assert os.path.isfile(aro), u'Antibiotic JSON not valid {0!r:s}'.format(aro)
    assert isinstance(threads, int)
    ispath = (lambda x: glob(x + "/*.fa*") if os.path.isdir(x) else [x])
    genes = ispath(genes)
    targets = ispath(targets)
    result = ARMISeekr(genes, targets, threads)
    result.mpblast(cuttoff)
    json.dump(result.plus, open("%s/ARMI-gene_results_%s.json" % (out, time.strftime("%Y.%m.%d.%H.%M.%S")), 'w'),
              sort_keys=True, indent=4, separators=(',', ': '))
    decipher(result.plus, json.load(open(aro)), out)


if __name__ == '__main__':
    from argparse import ArgumentParser
    parser = ArgumentParser(description='Antibiotic Resistance Marker Identifier:\n'
                                        'Use to find markers for any bacterial genome')
    parser.add_argument('--version', action='version', version='%(prog)s v0.5')
    parser.add_argument('-i', '--input', required=True, help='Specify input fasta folder')
    parser.add_argument('-m', '--marker', required=True, help='Specify antibiotic markers folder')
    parser.add_argument('-o', '--output', required=True, help='Specify output folder for csv')
    parser.add_argument('-a', '--anti', type=str, required=True, help='JSON file location')
    parser.add_argument('-c', '--cutoff', type=int, default=70, help='Threshold for maximum unique bacteria'
                                                                     ' for a single antibiotic')
    parser.add_argument('-t', '--threads', type=int, default=12, help='Specify number of threads')
    args = vars(parser.parse_args())
    helper(args['marker'], args['input'], args['output'], args['cutoff'], args['anti'], args['threads'])
